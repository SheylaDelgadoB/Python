# -*- coding: utf-8 -*-
"""Problema1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zq8-JgT_YqYr1BdnrQfGDEtiEIQw5Da-

# MARIO GAME

<img src='./img/ejercicio1.png'>

Implemente un programa que imprima una media pirámide de una altura específica, como se indica a continuación.

<code>$ ./mario
Height: 4
   #
  ##
 ###
####</code>

## Especificaciones

- Cree un archivo llamado <code>mario.py</code>,el cual es un programa que recrea una media pirámide usando los hash (#) para los bloques.
- Para hacer las cosas más interesantes, primero solicite al usuario <code>input</code> la altura de la media pirámide, el cual debe ser un número entero positivo entre <code>1</code> y <code>8</code>, inclusive.
- Si el usuario no proporciona un número entero positivo no mayor que <code>8</code>, debe volver a solicitar el mismo.
- Luego, genere (con la ayuda de <code>print</code> uno o más bucles) la media pirámide deseada.
- Tenga cuidado de alinear la esquina inferior izquierda de su media pirámide con el borde izquierdo de la ventana de su terminal.

## Uso

Su programa debería comportarse según el ejemplo siguiente.

<code>$ ./mario
Height: 4
   #
  ##
 ###
####</code>

## Pruebas

- Ejecute su programa como <code>python mario.py</code> y espere una solicitud de entrada. Escribe <code>-1</code> y presiona enter. Su programa debe rechazar esta entrada como inválida, por ejemplo, volviendo a solicitar al usuario que escriba otro número.
- Ejecute su programa como <code>python mario.py</code> y espere una solicitud de entrada. Escribe <code>0</code> y presiona enter. Su programa debe rechazar esta entrada como inválida, por ejemplo, volviendo a solicitar al usuario que escriba otro número.
- Ejecute su programa como <code>python mario.py</code> y espere una solicitud de entrada. Escribe <code>1</code> y presiona enter. Su programa debería generar la siguiente salida. Asegúrese de que la pirámide esté alineada con la esquina inferior izquierda de su terminal y de que no haya espacios adicionales al final de cada línea.

<code>#</code>

Ejecute su programa como <code>python mario.py</code> y espere una solicitud de entrada. Escribe <code>2</code> y presiona enter. Su programa debería generar la siguiente salida. Asegúrese de que la pirámide esté alineada con la esquina inferior izquierda de su terminal y de que no haya espacios adicionales al final de cada línea.

<code> #
##</code>

Ejecute su programa como <code>python mario.py</code> y espere una solicitud de entrada. Escribe <code>8</code> y presiona enter. Su programa debería generar la siguiente salida. Asegúrese de que la pirámide esté alineada con la esquina inferior izquierda de su terminal y de que no haya espacios adicionales al final de cada línea.

<code>       #
      ##
     ###
    ####
   #####
  ######
 #######
########</code>

Ejecute su programa como <code>python mario.py</code> y espere una solicitud de entrada. Escribe <code>9</code> y presiona enter. Su programa debe rechazar esta entrada como inválida, por ejemplo, volviendo a solicitar al usuario que escriba otro número. Luego, escribe <code>2</code> y presiona enter. Su programa debería generar la siguiente salida. Asegúrese de que la pirámide esté alineada con la esquina inferior izquierda de su terminal y de que no haya espacios adicionales al final de cada línea.

<code> #
##</code>

- Ejecute su programa como <code>python mario.py</code> y espere una solicitud de entrada. Escribe fooy presiona enter. Su programa debe rechazar esta entrada como inválida, por ejemplo, volviendo a solicitar al usuario que escriba otro número.
- Ejecute su programa como <code>python mario.py</code> y espere una solicitud de entrada. No escriba nada y presione enter. Su programa debe rechazar esta entrada como inválida, por ejemplo, volviendo a solicitar al usuario que escriba otro número.
"""

def triangulo(n):
    """
    for i in range(1,n+1) -> hacemos un bucle entre el 1 y el numero introducido
    " "*(n-i) -> añade los espacios al inicio
    "*"*(i+i-1) -> por cada valor entre el 1 y n+1, devolvemos la cantidad de asteriscos
    [] -> el resultado lo devuelve dentro de un array
    "\n".join() -> divide el array en una cadena separando cada elemento con un \n (salto de linea)
    """
    return "\n".join([" "*(n-i)+"*"*(i+i-1) for i in range(1,n+1)])
 
numero=int(input("indica un numero: "))
print(triangulo(numero))